name: Deploy Nomad Config
on: [push]

env:
  NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
  NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}

jobs:
  ansible:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}

      - name: Write Out Ansible Vault Password
        uses: DamianReeves/write-file-action@master
        with:
          path: ansible.vault
          contents: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

      - name: Fix rsync
        run: mkdir -p conf/nomad

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/playbook.yaml
          key: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}
          inventory: |
            [main]
            10.0.0.1
            10.0.0.3
            10.0.0.5
            10.0.0.6
          options: |
            -e @static_keys.yaml
            --vault-password-file ansible.vault

  tailscale-acl:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Test ACL
        uses: tailscale/gitops-acl-action@v1
        with:
          api-key: ${{ secrets.TS_API_KEY }}
          tailnet: ${{ secrets.TS_TAILNET }}
          action: test
          policy-file: acls/tailscale.hujson
      - name: Deploy ACL
        uses: tailscale/gitops-acl-action@v1
        with:
          api-key: ${{ secrets.TS_API_KEY }}
          tailnet: ${{ secrets.TS_TAILNET }}
          action: apply
          policy-file: acls/tailscale.hujson

  nomad:
    name: Register Nomad Volumes
    needs: ansible
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}
      - name: Setup Nomad
        uses: lucasmelin/setup-nomad@v2.0.0
      - run: nomad volume register volumes/nfs-grafana.hcl
      - run: nomad volume register volumes/nfs-influxdb.hcl
      - run: nomad volume register volumes/nfs-prometheus.hcl
      - run: nomad volume register volumes/nfs-hoass.hcl
      - run: nomad volume register volumes/nfs-seaweedfs.hcl
      - run: nomad volume register volumes/nfs-keepass-store.hcl
      - run: nomad volume register volumes/nfs-ytdl.hcl
  #      - run: nomad run jobs/plugins/nfs_csi_nodes.hcl
  #      - run: nomad run jobs/plugins/nfs_csi_controller.hcl
  #      - run: nomad run jobs/samba.hcl

  terraform-plan:
    runs-on: ubuntu-latest
    needs: ansible
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  #      # If this is a PR post the changes
  #      - name: Push Terraform Output to PR
  #        if: github.ref != 'refs/heads/main'
  #        uses: actions/github-script@v7
  #        env:
  #          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
  #        with:
  #          github-token: ${{ secrets.GITHUB_TOKEN }}
  #          script: |
  #            const body = `${process.env.SUMMARY}`;
  #            github.rest.issues.createComment({
  #                issue_number: context.issue.number,
  #                owner: context.repo.owner,
  #                repo: context.repo.repo,
  #                body: body
  #            })

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    #if: needs.terraform-plan.outputs.tfplanExitCode == 2
    needs: [terraform-plan]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Download saved plan from artifacts
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create Output Dir
        run: mkdir -p docs_out
      - uses: ZacJW/markdown-html-action@1.1.0
        with:
          input_files: '[["docs/*.md"]]'
          output_files: '["docs_out/docs.html"]'
          #builtin_stylesheet: 'style.css'
          packages: "pymdown-extensions"
          extensions: '["pymdownx.extra"]'
          # Save plan to artifacts
      - name: Publish Generated Docs Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs.html
          path: docs_out/docs.html

  publish-docs:
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: Download Docs File
        uses: actions/download-artifact@v4
        with:
          name:
            docs.html
#      - name: Upload to S3 Storage
#        uses: shallwefootball/s3-upload-action@master
#        with:
#          aws_key_id: ${{ secrets.AWS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#          aws_bucket: ${{ secrets.AWS_BUCKET }}
#          source_dir: "."
#          endpoint: s3.cyber.psych0si.is

      - name: Upload to Amazon S3
        uses: Noelware/s3-action@2.2.6
        with:
          files: |
              docs.html

          access-key-id: ${{ secrets.AWS_KEY_ID }}
          path-format: '/$(tag)'
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          endpoint: https://s3.cyber.psych0si.is
          #prefix: /artifacts
          #region: us-east-1
          bucket: ${{ secrets.AWS_BUCKET }}
          enforce-path-access-style: true

  notifications:
    needs: [ansible, nomad, terraform-apply]
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "The project {{ EVENT_PAYLOAD.repository.full_name }} has been fully deployed."
